# install and configure ibm-block-csi operator
---
- name: Create Namespace
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    definition:
      kind: Namespace
      apiVersion: v1
      metadata:
        name: "{{ kube_storage_namespace }}"
  tags:
    - storage
    - ibm

- name: "install operator"
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ kube_storage_namespace }}"
    template:
      crds/1.7.0/ibm-block-csi-operator.yaml.j2
  register: operators
  tags:
    - storage
    - ibm



- name: Wait for operator pods to start
  shell: oc get pod -l app.kubernetes.io/name=ibm-block-csi-operator  -n "{{ kube_storage_namespace }}" | grep -E "(1/1|2/2).*Running" | wc -l
  register: podsrunning
  until: " '1' in podsrunning.stdout"
  retries: 120
  delay: 2
  changed_when: false
  tags: 
    - storage
    - ibm
      

- name: Print operator pod status
  ansible.builtin.debug: 
    msg: "pods running: {{podsrunning}}"


- name: Install the IBM block storage CSI driver
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ kube_storage_namespace }}"

    template:
      crds/1.7.0/csi.ibm.com_v1_ibmblockcsi_cr.yaml.j2
  tags:
    - storage
    - ibm


- name: Pause for 1 minutes to be sure pods are comming up fine
  pause:
    minutes: 1

- name: Wait for CSI drivers to start
  shell: oc get pod -l csi  -n "{{ kube_storage_namespace }}" | grep -E "Running" | wc -l
  register: csi_podsrunning
  until: " '3' in csi_podsrunning.stdout"
  retries: 120
  delay: 2
  changed_when: false
  tags: 
    - storage
    - ibm
      


- name: Print operator pod status
  ansible.builtin.debug: 
    msg: "pods running: {{csi_podsrunning}}"

- name: Install secret
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    definition:
      apiVersion: v1 
      kind: Secret
      metadata:
        name: svc-dh8
        namespace: "{{ kube_storage_namespace }}"
      type: Opaque
      stringData:
        management_address: "{{ ibm_storage_address }}"
        username: rhlab
      data:
        password: cmVkaGF0MTIzNA==
  tags: 
    - storage
    - ibm


- name: "create compressed storage class"
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: svc-fs840-comp
      provisioner: block.csi.ibm.com
      parameters:
        SpaceEfficiency: compressed
        pool: fs840-csi
        csi.storage.k8s.io/provisioner-secret-name: svc-dh8
        csi.storage.k8s.io/provisioner-secret-namespace: "{{ kube_storage_namespace }}"
        csi.storage.k8s.io/controller-publish-secret-name: svc-dh8
        csi.storage.k8s.io/controller-publish-secret-namespace: "{{ kube_storage_namespace }}"
        csi.storage.k8s.io/controller-expand-secret-name: svc-dh8
        csi.storage.k8s.io/controller-expand-secret-namespace: "{{ kube_storage_namespace }}"
        csi.storage.k8s.io/fstype: xfs
        volume_name_prefix: rhlab-comp
      allowVolumeExpansion: true
  tags: 
    - storage
    - ibm


- name: "create a thin storage class"
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: svc-fs840-thin
        annotations:
          storageclass.kubernetes.io/is-default-class: "true"
      provisioner: block.csi.ibm.com
      parameters:
        SpaceEfficiency: thin
        pool: fs840-csi
        csi.storage.k8s.io/provisioner-secret-name: svc-dh8
        csi.storage.k8s.io/provisioner-secret-namespace: "{{ kube_storage_namespace }}"
        csi.storage.k8s.io/controller-publish-secret-name: svc-dh8
        csi.storage.k8s.io/controller-publish-secret-namespace: "{{ kube_storage_namespace }}"
        csi.storage.k8s.io/controller-expand-secret-name: svc-dh8
        csi.storage.k8s.io/controller-expand-secret-namespace: "{{ kube_storage_namespace }}"
        csi.storage.k8s.io/fstype: xfs
        volume_name_prefix: rhlab-thin
      allowVolumeExpansion: true
  tags: 
    - storage
    - ibm



- name: "create a test claim to be sure all works file"
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ kube_storage_namespace }}"
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: test-pvc
        namespace: techdata-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: svc-fs840-thin
        volumeMode: Filesystem
  tags: 
    - storage
    - ibm

- name: Wait for test pvc to be  bound
  shell: oc get pvc test-pvc  -n "{{ kube_storage_namespace }}"  -o=jsonpath='{.status.phase}' | grep "Bound" | wc -l
  register: test_pvc_bound
  until: " '1' in test_pvc_bound.stdout"
  retries: 120
  delay: 2
  changed_when: false
  tags: 
    - storage
    - ibm


- name: "all good delte test-pvc"
  kubernetes.core.k8s:
    state: absent
    kubeconfig: "{{ kubeconfig }}"
    namespace: "{{ kube_storage_namespace }}"
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: test-pvc
        namespace: techdata-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: svc-fs840-thin
        volumeMode: Filesystem
    wait: true
    wait_timeout: 180
  tags: 
    - storage
    - ibm


- name: "create a registry storage pvc"
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    namespace: "openshift-image-registry"
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: registry-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Gi
        storageClassName: svc-fs840-thin
        volumeMode: Filesystem
    wait: true
    wait_timeout: 180
  tags: 
    - storage
    - registry

- name: Add pvc registry-storage to image registry and expose it
  kubernetes.core.k8s:
    state: present
    kubeconfig: "{{ kubeconfig }}"
    merge_type: merge
    definition:
      kind: Config
      apiVersion: imageregistry.operator.openshift.io/v1
      metadata:
        name: cluster
      spec:
        managementState: Managed
        storage:
          pvc:
            claim: registry-storage
        defaultRoute: true
# Needs retry because Operator needs time to create that object
  failed_when: false
  register: patch_status
  retries: 18
  delay: 10
  until: patch_status.msg is not defined
  tags: 
    - storage
    - registry

    # todo check the state
    # oc get configs.imageregistry.operator.openshift.io cluster -o yaml | grep -i state
